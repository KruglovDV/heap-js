{"version":3,"file":"heap-js.es5.js","sources":["../src/Heap.ts"],"sourcesContent":["export type Comparator<T> = (a: T, b: T) => number\nexport type IsEqual<T> = (a: T, b: T) => boolean\n\n/**\n * Heap\n * @type {Class}\n */\nexport class Heap<T> {\n  heapArray: Array<T> = []\n  compare: Comparator<T>\n  _limit: number | null = null\n\n  /**\n   * Alias of add\n   */\n  offer = this.add\n\n  /**\n   * Alias of peek\n   */\n  element = this.peek\n\n  /**\n   * Alias of pop\n   */\n  poll = this.pop\n\n  /**\n   * Heap instance constructor.\n   * @param  {Function} compare Optional comparison function, defaults to Heap.minComparator<number>\n   */\n  constructor(compare: Comparator<T | number> = Heap.minComparator) {\n    this.compare = compare\n  }\n\n  /*\n            Static methods\n   */\n\n  /**\n   * Gets children indices for given index.\n   * @param  {Number} idx     Parent index\n   * @return {Array(Number)}  Array of children indices\n   */\n  static getChildrenIndexOf(idx: number): Array<number> {\n    return [idx * 2 + 1, idx * 2 + 2]\n  }\n\n  /**\n   * Gets parent index for given index.\n   * @param  {Number} idx  Children index\n   * @return {Number | undefined}      Parent index, undefined if idx is 0\n   */\n  static getParentIndexOf(idx: number): number {\n    if (idx <= 0) {\n      return -1\n    }\n    const whichChildren = idx % 2 ? 1 : 2\n    return Math.floor((idx - whichChildren) / 2)\n  }\n\n  /**\n   * Min heap comparison function, default.\n   * @param  {any} a     First element\n   * @param  {any} b     Second element\n   * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up\n   */\n  static minComparator(a: number, b: number): number {\n    return a - b\n  }\n\n  /**\n   * Max heap comparison function.\n   * @param  {any} a     First element\n   * @param  {any} b     Second element\n   * @return {Number}    0 if they're equal, positive if `a` goes up, negative if `b` goes up\n   */\n  static maxComparator(a: number, b: number): number {\n    return b - a\n  }\n\n  /**\n   * Default equality function.\n   * @param  {any} a    First element\n   * @param  {any} b    Second element\n   * @return {Boolean}  True if equal, false otherwise\n   */\n  static defaultIsEqual<N>(a: N, b: N): boolean {\n    return a === b\n  }\n\n  /**\n   * Prints a heap.\n   * @param  {Heap} heap Heap to be printed\n   * @returns {String}\n   */\n  static print<N>(heap: Heap<N>): string {\n    function deep(i: number) {\n      const pi = Heap.getParentIndexOf(i)\n      return Math.floor(Math.log2(pi + 1))\n    }\n\n    function repeat(str: string, times: number) {\n      let out = \"\"\n      for (; times > 0; --times) {\n        out += str\n      }\n      return out\n    }\n\n    let node = 0\n    const lines: Array<Array<string>> = []\n    const maxLines = deep(heap.length - 1) + 2\n    let maxLength = 0\n\n    while (node < heap.length) {\n      let i = deep(node) + 1\n      if (node === 0) {\n        i = 0\n      }\n      // Text representation\n      const nodeText = heap.get(node).toString()\n      if (nodeText.length > maxLength) {\n        maxLength = nodeText.length\n      }\n      // Add to line\n      lines[i] = lines[i] || []\n      lines[i].push(nodeText)\n      node += 1\n    }\n\n    return lines\n      .map((line, i) => {\n        const times = Math.pow(2, maxLines - i) - 1\n        return (\n          repeat(\" \", Math.floor(times / 2) * maxLength) +\n          line\n            .map(el => {\n              // centered\n              const half = (maxLength - el.length) / 2\n              return (\n                repeat(\" \", Math.ceil(half)) +\n                el +\n                repeat(\" \", Math.floor(half))\n              )\n            })\n            .join(repeat(\" \", times * maxLength))\n        )\n      })\n      .join(\"\\n\")\n  }\n\n  /*\n            Python style\n   */\n  /**\n   * Converts an array into an array-heap\n   * @param  {Array}    arr      Array to be modified\n   * @param  {Function} compare  Optional compare function\n   * @return {Heap}   For convenience, it returns a Heap instance\n   */\n  static heapify<N>(arr: Array<N>, compare?: Comparator<N>) {\n    const heap = new Heap(compare)\n    heap.heapArray = arr\n    heap.init()\n    return heap\n  }\n  /**\n   * Extract the peek of an array-heap\n   * @param  {Array} heapArr     Array to be modified, should be a heap\n   * @param  {Function} compare  Optional compare function\n   * @return {any}   Returns the extracted peek\n   */\n  static heappop<N>(heapArr: Array<N>, compare?: Comparator<N>) {\n    const heap = new Heap(compare)\n    heap.heapArray = heapArr\n    return heap.pop()\n  }\n  /**\n   * Pushes a item into an array-heap\n   * @param  {Array} heapArr     Array to be modified, should be a heap\n   * @param  {any}   item        Item to push\n   * @param  {Function} compare  Optional compare function\n   */\n  static heappush<N>(heapArr: Array<N>, item: N, compare?: Comparator<N>) {\n    const heap = new Heap(compare)\n    heap.heapArray = heapArr\n    heap.push(item)\n  }\n  /**\n   * Push followed by pop, faster\n   * @param  {Array} heapArr     Array to be modified, should be a heap\n   * @param  {any}   item        Item to push\n   * @param  {Function} compare  Optional compare function\n   * @return {any}   Returns the extracted peek\n   */\n  static heappushpop<N>(heapArr: Array<N>, item: N, compare?: Comparator<N>) {\n    const heap = new Heap(compare)\n    heap.heapArray = heapArr\n    return heap.pushpop(item)\n  }\n  /**\n   * Replace peek with item\n   * @param  {Array} heapArr     Array to be modified, should be a heap\n   * @param  {any}   item        Item as replacement\n   * @param  {Function} compare  Optional compare function\n   * @return {any}   Returns the extracted peek\n   */\n  static heapreplace<N>(heapArr: Array<N>, item: N, compare?: Comparator<N>) {\n    const heap = new Heap(compare)\n    heap.heapArray = heapArr\n    return heap.replace(item)\n  }\n\n  /*\n            Instance methods\n   */\n\n  /**\n   * Adds an element to the heap. Aliases: `offer`.\n   * Same as: push(element)\n   * @param {any} element Element to be added\n   * @return {Boolean} true\n   */\n  add(element: T): boolean {\n    this._sortNodeUp(this.heapArray.push(element) - 1)\n    this._applyLimit()\n    return true\n  }\n\n  /**\n   * Adds an array of elements to the heap.\n   * Similar as: push(element, element, ...).\n   * @param {Array} elements Elements to be added\n   * @return {Boolean} true\n   */\n  addAll(elements: Array<T>): boolean {\n    let i = this.length\n    this.heapArray.push(...elements)\n    for (const l = this.length; i < l; ++i) {\n      this._sortNodeUp(i)\n    }\n    this._applyLimit()\n    return true\n  }\n\n  /**\n   * Check if the heap is sorted, useful for testing purposes.\n   * @return {Undefined | Element}  Returns an element if something wrong is found, otherwise it's undefined\n   */\n  check(): T | undefined {\n    return this.heapArray.find(\n      (el: T, j: number, arr: Array<T>) =>\n        !!this.getChildrenOf(j).find(ch => this.compare(el, ch) > 0)\n    )\n  }\n\n  /**\n   * Remove all of the elements from this heap.\n   */\n  clear(): void {\n    this.heapArray = []\n  }\n\n  /**\n   * Clone this heap\n   * @return {Heap}\n   */\n  clone(): Heap<T> {\n    const cloned = new Heap<T>(this.comparator())\n    cloned.heapArray = this.toArray()\n    cloned._limit = this._limit\n    return cloned\n  }\n\n  /**\n   * Returns the comparison function.\n   * @return {Function}\n   */\n  comparator(): Comparator<T> {\n    return this.compare\n  }\n\n  /**\n   * Returns true if this queue contains the specified element.\n   * @param  {any}      o   Element to be found\n   * @param  {Function} fn  Optional comparison function, receives (element, needle)\n   * @return {Boolean}\n   */\n  contains(o: T, fn: IsEqual<T> = Heap.defaultIsEqual): boolean {\n    return this.heapArray.findIndex(el => fn(el, o)) >= 0\n  }\n\n  /**\n   * Initialise a heap, sorting nodes\n   * @param  {Array} array Optional initial state array\n   */\n  init(array?: Array<T>): void {\n    if (array) {\n      this.heapArray = array.slice(0)\n    }\n    for (let i = Math.floor(this.heapArray.length); i >= 0; --i) {\n      this._sortNodeDown(i)\n    }\n    this._applyLimit()\n  }\n\n  /**\n   * Test if the heap has no elements.\n   * @return {Boolean} True if no elements on the heap\n   */\n  isEmpty(): boolean {\n    return this.length === 0\n  }\n\n  /**\n   * Length of the heap.\n   * @return {Number}\n   */\n  get length(): number {\n    return this.heapArray.length\n  }\n\n  /**\n   * Get length limit of the heap.\n   * @return {Number}\n   */\n  get limit(): number | null {\n    return this._limit\n  }\n\n  /**\n   * Set length limit of the heap.\n   * @return {Number}\n   */\n  set limit(_l: number | null) {\n    this._limit = _l\n    this._applyLimit()\n  }\n\n  /**\n   * Top node. Aliases: `element`.\n   * Same as: `top(1)[0]`\n   * @return {any} Top node\n   */\n  peek(): T | undefined {\n    return this.heapArray[0]\n  }\n\n  /**\n   * Extract the top node (root). Aliases: `poll`.\n   * @return {any} Extracted top node, undefined if empty\n   */\n  pop(): T | undefined {\n    const pop = this.heapArray.pop()\n    if (this.length > 0 && pop !== undefined) {\n      return this.replace(pop)\n    }\n    return pop\n  }\n\n  /**\n   * Pushes element(s) to the heap.\n   * @param  {...any} elements Elements to insert\n   * @return {Boolean} True if elements are present\n   */\n  push(...elements: Array<T>): boolean {\n    if (elements.length < 1) {\n      return false\n    } else if (elements.length === 1) {\n      return this.add(elements[0])\n    } else {\n      return this.addAll(elements)\n    }\n  }\n\n  /**\n   * Same as push & pop in sequence, but faster\n   * @param  {any} element Element to insert\n   * @return {any}  Extracted top node\n   */\n  pushpop(element: T): T {\n    if (this.heapArray[0] < element) {\n      ;[element, this.heapArray[0]] = [this.heapArray[0], element]\n      this._sortNodeDown(0)\n    }\n    return element\n  }\n\n  /**\n   * Remove an element from the heap.\n   * @param  {any}   o      Element to be found\n   * @param  {Function} fn  Optional function to compare\n   * @return {Boolean}      True if the heap was modified\n   */\n  remove(o: T, fn: IsEqual<T> = Heap.defaultIsEqual) {\n    if (o === undefined) {\n      this.pop()\n      return true\n    } else {\n      const idx = this.heapArray.findIndex(el => fn(el, o))\n      if (idx === this.length - 1) {\n        this.heapArray.pop()\n        return true\n      } else if (idx >= 0) {\n        const pop = this.heapArray.pop()\n        if (pop !== undefined) {\n          this.heapArray.splice(idx, 1, pop)\n        } else {\n          this.heapArray.splice(idx, 1)\n        }\n        this._sortNodeUp(idx)\n        this._sortNodeDown(idx)\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * Pop the current peek value, and add the new item.\n   * @param  {any} element  Element to replace peek\n   * @return {any}         Old peek\n   */\n  replace(element: T): T {\n    const peek = this.heapArray[0]\n    this.heapArray[0] = element\n    this._sortNodeDown(0)\n    return peek\n  }\n\n  /**\n   * Size of the heap\n   * @return {Number}\n   */\n  size(): number {\n    return this.length\n  }\n\n  /**\n   * Return the top N elements of the heap.\n   *\n   * @param  {Number} n  Number of elements.\n   * @return {Array}    Array of length <= N.\n   */\n  top(n: number = 1): Array<T> {\n    if (n <= 0) {\n      // Nothing to do\n      return []\n    } else if (n === 1) {\n      // Just the peek\n      return [this.heapArray[0]]\n    } else if (n >= this.heapArray.length) {\n      // The whole peek\n      // Clone is needed due to the sort method (in-place) that would destroy the heap\n      const cloned = this.heapArray.slice(0)\n      cloned.sort(this.compare)\n      return cloned\n    } else {\n      // Some elements\n      const result = this._topN(n)\n      result.sort(this.compare)\n      return result\n    }\n  }\n\n  /**\n   * Clone the heap's internal array\n   * @return {Array}\n   */\n  toArray(): Array<T> {\n    return this.heapArray.slice(0)\n  }\n\n  /**\n   * String output, call to Array.prototype.toString()\n   * @return {String}\n   */\n  toString(): string {\n    return this.heapArray.toString()\n  }\n\n  /**\n   * Get the element at the given index.\n   * @param  {Number} i Index to get\n   * @return {any}       Element at that index\n   */\n  get(i: number): T {\n    return this.heapArray[i]\n  }\n\n  /**\n   * Get the elements of these node's children\n   * @param  {Number} idx Node index\n   * @return {Array(any)}  Children elements\n   */\n  getChildrenOf(idx: number): Array<T> {\n    return Heap.getChildrenIndexOf(idx).map(i => this.heapArray[i])\n  }\n\n  /**\n   * Get the element of this node's parent\n   * @param  {Number} idx Node index\n   * @return {any}     Parent element\n   */\n  getParentOf(idx: number): T | undefined {\n    const pi = Heap.getParentIndexOf(idx)\n    return this.heapArray[pi]\n  }\n\n  /**\n   * Limit heap size if needed\n   */\n  _applyLimit() {\n    if (this._limit && this._limit < this.heapArray.length) {\n      let rm = this.heapArray.length - this._limit\n      // It's much faster than splice\n      while (rm) {\n        this.heapArray.pop()\n        --rm\n      }\n    }\n  }\n\n  /**\n   * Returns the inverse to the comparison function.\n   * @return {Function}\n   */\n  _invertedCompare = (a: T, b: T): number => {\n    return -1 * this.compare(a, b)\n  }\n\n  /**\n   * Move a node to a new index, switching places\n   * @param  {Number} j First node index\n   * @param  {Number} k Another node index\n   */\n  _moveNode(j: number, k: number): void {\n    ;[this.heapArray[j], this.heapArray[k]] = [\n      this.heapArray[k],\n      this.heapArray[j]\n    ]\n  }\n\n  /**\n   * Move a node down the tree (to the leaves) to find a place where the heap is sorted.\n   * @param  {Number} i Index of the node\n   */\n  _sortNodeDown(i: number): boolean {\n    let moveIt = i < this.heapArray.length - 1\n    let moved = false\n    const self = this.heapArray[i]\n\n    const getPotentialParent = (best: number, j: number) => {\n      if (this.compare(this.heapArray[j], this.heapArray[best]) < 0) {\n        best = j\n      }\n      return best\n    }\n\n    while (moveIt) {\n      const childrenIdx = Heap.getChildrenIndexOf(i)\n      const bestChildIndex = childrenIdx.reduce(\n        getPotentialParent,\n        childrenIdx[0]\n      )\n      const bestChild = this.heapArray[bestChildIndex]\n      if (\n        typeof bestChild !== \"undefined\" &&\n        this.compare(self, bestChild) > 0\n      ) {\n        this._moveNode(i, bestChildIndex)\n        i = bestChildIndex\n        moved = true\n      } else {\n        moveIt = false\n      }\n    }\n    return moved\n  }\n\n  /**\n   * Move a node up the tree (to the root) to find a place where the heap is sorted.\n   * @param  {Number} i Index of the node\n   */\n  _sortNodeUp(i: number): boolean {\n    let moveIt = i > 0\n    let moved = false\n    while (moveIt) {\n      const pi = Heap.getParentIndexOf(i)\n      if (pi >= 0 && this.compare(this.heapArray[pi], this.heapArray[i]) > 0) {\n        this._moveNode(i, pi)\n        i = pi\n        moved = true\n      } else {\n        moveIt = false\n      }\n    }\n    return moved\n  }\n\n  /**\n   * Return the top N elements of the heap, without corner cases, unsorted\n   *\n   * @param  {Number} n  Number of elements.\n   * @return {Array}    Array of length <= N.\n   */\n  _topN(n: number): Array<T> {\n    // Use an inverted heap\n    const bottomHeap = new Heap(this._invertedCompare)\n    bottomHeap.limit = n\n    const indices = [0]\n    const arr = this.heapArray\n    while (indices.length) {\n      const i = indices.shift() as number\n      if (i < arr.length) {\n        if (bottomHeap.length < n) {\n          bottomHeap.push(arr[i])\n          indices.push(...Heap.getChildrenIndexOf(i))\n        } else if (this.compare(arr[i], bottomHeap.peek() as T) <= 0) {\n          bottomHeap.replace(arr[i])\n          indices.push(...Heap.getChildrenIndexOf(i))\n        }\n      }\n    }\n    return bottomHeap.toArray()\n  }\n}\n\nexport default Heap\n"],"names":[],"mappings":"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"}